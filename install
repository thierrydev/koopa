#!/usr/bin/env bash
set -Eeu -o pipefail

# """
# koopa piped install script.
# Updated 2020-06-29.
#
# This downloads a copy of the latest stable release into a temporary directory.
# """

# shell/posix/functions/boolean-logical.sh
_koopa_is_installed() {
    command -v "$1" >/dev/null
}

# shell/posix/functions/print.sh
_koopa_print() {
    printf '%b\n' "${1:-}"
    return 0
}

# Check dependencies before attempting to install.
deps=(curl find git grep mktemp sudo tar)

for dep in "${deps[@]}"
do
    if ! _koopa_is_installed "$dep"
    then
        >&2 printf "ERROR: '%s' is not installed.\n" "$dep"
        >&2 printf "Required dependencies: %s\n" "${deps[*]}"
        exit 1
    fi
done

release="rolling"

if [[ "$#" -gt 0 ]]
then
    pos=()
    while (("$#"))
    do
        case "$1" in
        --release=*)
            release="${1#*=}"
            shift 1
            ;;
        --release)
            release="$2"
            shift 2
            ;;
        *)
            pos+=("$1")
            shift 1
            ;;
        esac
    done
    if [[ "${#pos[@]}" -gt 0 ]]
    then
        set -- "${pos[@]}"
    fi
fi

repo="acidgenomics/koopa"

if [[ "$release" == "rolling" ]]
then
    _koopa_print "Installing koopa."
    _koopa_print "Using rolling release from master branch."
    _koopa_print "This can be updated using 'koopa update'."
    git_url="https://github.com/${repo}.git"
    # Alternatively, here's how to get master branch tarball:
    # > tarball_url="https://github.com/${repo}/tarball/master"
else
    # Note that use of 'api.github.com' here returns JSON instead of HTML.
    json_url="https://api.github.com/repos/${repo}/releases/${release}"
    json="$(curl -s "$json_url")"
    tarball_url="$( \
        _koopa_print "$json" \
            | grep '"tarball_url":' \
            | cut -d '"' -f 4 \
    )"
    tag_name="$( \
        _koopa_print "$json" \
            | grep '"tag_name":' \
            | cut -d '"' -f 4 \
    )"
    _koopa_print "Installing koopa ${tag_name}."
    _koopa_print "This is a stable release that cannot be updated."
fi

tmp_dir="$(mktemp -d)"

(
    cd "$tmp_dir" || exit 1
    if [[ "$release" == "rolling" ]]
    then
        git clone --recursive "$git_url" koopa
        cd koopa || exit 1
    else
        file="koopa.tar.gz"
        curl \
            --location \
            --output "$file" \
            "$tarball_url"
        tar -xzf "$file"
        cd acidgenomics-koopa-* || exit 1
    fi
    chmod +x install
    ./install "$@"
)

rm -fr "$tmp_dir"
